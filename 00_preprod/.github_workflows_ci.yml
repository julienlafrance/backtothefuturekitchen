name: CI/CD Pipeline Mangetamain

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Create virtual environment and install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt -r requirements-dev.txt
        
    - name: Check code formatting with Black
      run: |
        source .venv/bin/activate
        black --check src/ tests/
        
    - name: Lint with Flake8 (PEP 8)
      run: |
        source .venv/bin/activate
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type check with MyPy
      run: |
        source .venv/bin/activate
        mypy src/ --ignore-missing-imports
        
    - name: Run tests with pytest
      run: |
        source .venv/bin/activate
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=90
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        
    - name: Build documentation
      run: |
        source .venv/bin/activate
        cd docs/
        make html
        
    - name: Check docstrings presence
      run: |
        source .venv/bin/activate
        python -c "
        import ast
        import sys
        from pathlib import Path
        
        def check_docstrings(file_path):
            with open(file_path, 'r') as f:
                tree = ast.parse(f.read())
            
            errors = []
            for node in ast.walk(tree):
                if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):
                    if not ast.get_docstring(node):
                        errors.append(f'{file_path}:{node.lineno} - Missing docstring for {node.name}')
            return errors
        
        all_errors = []
        for py_file in Path('src').rglob('*.py'):
            if py_file.name != '__init__.py':
                errors = check_docstrings(py_file)
                all_errors.extend(errors)
        
        if all_errors:
            print('❌ Missing docstrings:')
            for error in all_errors:
                print(error)
            sys.exit(1)
        else:
            print('✅ All functions and classes have docstrings')
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Streamlit Cloud
      run: |
        # Note: Le déploiement Streamlit Cloud se fait automatiquement
        # quand le code est poussé sur la branche principale
        echo "✅ Déploiement automatique vers Streamlit Cloud"
        
    - name: Notify team
      run: |
        echo "🚀 Application déployée avec succès !"
        echo "📊 Métriques de qualité :"
        echo "- ✅ Tests passés"
        echo "- ✅ Couverture >90%"
        echo "- ✅ PEP 8 respecté"
        echo "- ✅ Type hints vérifiés"
        echo "- ✅ Docstrings présentes"
