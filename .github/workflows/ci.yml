name: CI Pipeline - Quality & Tests

on:
  push:
    branches:
      - main  # Uniquement lors des push/merge vers main
  pull_request:
    branches:
      - main  # PRs vers main (branches en review)
  workflow_dispatch:  # Permet de déclencher manuellement

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dev dependencies
        run: |
          cd 20_prod
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Check PEP8 compliance with flake8
        run: |
          cd 20_prod
          source .venv/bin/activate
          echo "=== Vérification PEP8 avec flake8 ==="
          flake8 streamlit/ tests/ --config=../.flake8 --statistics --count

      - name: Check code formatting with black
        run: |
          cd 20_prod
          source .venv/bin/activate
          echo "=== Vérification du formatage avec black ==="
          black --check --diff streamlit/ tests/

      - name: Check docstrings with pydocstyle
        run: |
          cd 20_prod
          source .venv/bin/activate
          echo "=== Vérification des docstrings avec pydocstyle ==="
          pydocstyle streamlit/ --config=../.pydocstyle
        continue-on-error: true  # Ne bloque pas si les docstrings manquent (warning)

      - name: Type checking with mypy
        run: |
          cd 20_prod
          source .venv/bin/activate
          echo "=== Vérification des types avec mypy ==="
          mypy streamlit/ --ignore-missing-imports || true
        continue-on-error: true  # Type checking optionnel pour le moment

  test-prod:
    name: Tests unitaires - Production (coverage >= 90%)
    runs-on: ubuntu-latest
    needs: quality-checks  # Attend que les checks de qualité passent

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          cd 20_prod
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run tests with coverage
        run: |
          cd 20_prod
          source .venv/bin/activate
          echo "=== Exécution des tests avec couverture minimum 90% ==="
          pytest tests/ -v --cov=streamlit --cov-report=term-missing --cov-report=html --cov-fail-under=90

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-prod
          path: 20_prod/htmlcov/
          retention-days: 30

  test-preprod:
    name: Tests unitaires - Preprod (coverage >= 90%)
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          cd 10_preprod
          # Créer un symlink /app/40_utils pour que le path absolu dans pyproject.toml fonctionne
          sudo mkdir -p /app
          sudo ln -s "$(pwd)/../40_utils" /app/40_utils
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run tests with coverage
        run: |
          cd 10_preprod
          source .venv/bin/activate
          echo "=== Exécution des tests avec couverture minimum 90% ==="
          pytest tests/ -v --cov=src --cov-report=term-missing --cov-report=html --cov-fail-under=90

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-preprod
          path: 10_preprod/htmlcov/
          retention-days: 30

  infrastructure-tests:
    name: Tests d'infrastructure
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install test dependencies
        run: |
          cd 50_test
          uv venv
          source .venv/bin/activate
          uv pip install -e .

      - name: Run infrastructure tests
        run: |
          cd 50_test
          source .venv/bin/activate
          echo "=== Tests d'infrastructure (S3, DuckDB, Docker) ==="
          pytest -v -k "not test_docker" || echo "Some infrastructure tests may fail without credentials"
        continue-on-error: true  # Tests infra peuvent échouer sans credentials S3

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, test-prod, test-preprod, infrastructure-tests]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "=== Résumé du pipeline CI/CD ==="
          echo "Quality Checks: ${{ needs.quality-checks.result }}"
          echo "Tests Production: ${{ needs.test-prod.result }}"
          echo "Tests Preprod: ${{ needs.test-preprod.result }}"
          echo "Tests Infrastructure: ${{ needs.infrastructure-tests.result }}"

          if [ "${{ needs.quality-checks.result }}" != "success" ] || \
             [ "${{ needs.test-prod.result }}" != "success" ] || \
             [ "${{ needs.test-preprod.result }}" != "success" ]; then
            echo "❌ Le pipeline CI a échoué"
            exit 1
          else
            echo "✅ Tous les tests sont passés avec succès"
          fi
