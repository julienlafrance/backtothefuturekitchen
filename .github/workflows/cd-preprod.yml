name: CD - Preprod avec Auto-Rollback (Single Job)

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  APP_PATH: /home/dataia25/mangetamain/10_preprod
  DOCKER_PATH: /home/dataia25/mangetamain/30_docker
  STATE_FILE: /var/app-state/last-validated-sha.txt

jobs:
  deploy-and-watch:
    name: 🚀 Deploy + Watch CI
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 💾 Save rollback point
        run: |
          cd ${{ env.APP_PATH }}
          if [ -f ${{ env.STATE_FILE }} ]; then
            ROLLBACK_SHA=$(cat ${{ env.STATE_FILE }})
            echo "✅ Rollback point: $ROLLBACK_SHA"
          else
            ROLLBACK_SHA=$(git rev-parse HEAD)
            echo "$ROLLBACK_SHA" > ${{ env.STATE_FILE }}
            echo "📝 Premier deploy, rollback point: $ROLLBACK_SHA"
          fi

      - name: 📬 Notify deployment start
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B ${{ github.sha }} | head -1)
          curl -H "Content-Type: application/json" \
            -d "{\"content\":\"🚀 **Déploiement Preprod démarré**\\n📦 Commit: \\\`${{ github.sha }}\\\`\\n💬 ${COMMIT_MSG}\\n👤 Par: ${{ github.actor }}\"}" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"

      - name: 🚀 Deploy IMMEDIATELY
        run: |
          cd ${{ env.APP_PATH }}
          git fetch origin main
          git reset --hard ${{ github.sha }}
          echo "✅ Code mis à jour vers $(git rev-parse --short HEAD)"

          cd ${{ env.DOCKER_PATH }}
          docker-compose -f docker-compose-preprod.yml restart
          echo "✅ Container preprod redémarré"

      - name: 🔍 Quick health check
        run: |
          echo "⏳ Attente 30s..."
          sleep 30

          for i in {1..3}; do
            if curl -f -s --max-time 10 https://mangetamain.lafrance.io/ > /dev/null; then
              echo "✅ Preprod accessible!"
              exit 0
            fi
            echo "Tentative $i/3..."
            sleep 10
          done

          echo "⚠️  Preprod lente à démarrer, mais on continue..."
          exit 0

      - name: 👀 Launch CI watcher in background
        run: |
          # Créer le script de surveillance
          cat > /tmp/watch-ci-${{ github.sha }}.sh << 'SCRIPT_EOF'
          #!/bin/bash
          # Ne PAS utiliser set -e pour éviter crash sur erreurs temporaires

          COMMIT_SHA="${{ github.sha }}"
          APP_PATH="${{ env.APP_PATH }}"
          DOCKER_PATH="${{ env.DOCKER_PATH }}"
          STATE_FILE="${{ env.STATE_FILE }}"
          DISCORD_WEBHOOK="${{ secrets.DISCORD_WEBHOOK_URL }}"

          echo "[$(date)] 👀 Starting CI watch for $COMMIT_SHA"

          # Attendre démarrage CI (30s)
          sleep 30

          # Attendre max 5 minutes (300s = 30 × 10s)
          for i in {1..30}; do
            CI_STATUS=$(gh run list \
              --workflow="CI Pipeline - Quality & Tests" \
              --limit 10 \
              --json conclusion,headSha \
              --jq ".[] | select(.headSha == \"$COMMIT_SHA\") | .conclusion" \
              2>/dev/null | head -1)

            echo "[$(date)] Tentative $i/30 - CI Status: ${CI_STATUS:-pending}"

            if [ "$CI_STATUS" = "success" ]; then
              echo "[$(date)] ✅ CI passed! Marking as validated"
              echo "$COMMIT_SHA" > $STATE_FILE
              echo "[$(date)] VALIDATED: $COMMIT_SHA" >> /var/log/preprod-deployments.log

              # Notification Discord
              curl -H "Content-Type: application/json" \
                -d "{\"content\":\"✅ **CI Pipeline réussi pour Preprod**\\n📦 Commit: \\\`$COMMIT_SHA\\\`\\n🌐 https://mangetamain.lafrance.io/\\n✨ Déploiement validé et persisté!\"}" \
                "$DISCORD_WEBHOOK"

              exit 0
            elif [ "$CI_STATUS" = "failure" ] || [ "$CI_STATUS" = "cancelled" ]; then
              echo "[$(date)] ❌ CI FAILED! Starting rollback..."

              ROLLBACK_SHA=$(cat $STATE_FILE)
              echo "[$(date)] 🔄 Rolling back from $COMMIT_SHA to $ROLLBACK_SHA"

              cd $APP_PATH
              git fetch origin
              git reset --hard $ROLLBACK_SHA
              echo "[$(date)] ✅ Code restauré vers $(git rev-parse --short HEAD)"

              cd $DOCKER_PATH
              docker-compose -f docker-compose-preprod.yml restart
              echo "[$(date)] ✅ Container redémarré avec version précédente"

              sleep 60

              if curl -f -s --max-time 10 https://mangetamain.lafrance.io/ > /dev/null; then
                echo "[$(date)] ✅ Rollback réussi"
                echo "[$(date)] ROLLBACK: $COMMIT_SHA → $ROLLBACK_SHA" >> /var/log/preprod-deployments.log
              else
                echo "[$(date)] ❌ Rollback échoué!"
              fi

              # Notification Discord
              curl -H "Content-Type: application/json" \
                -d "{\"content\":\"🔄 **ROLLBACK Preprod effectué**\\n❌ Raison: CI a échoué\\n📦 Commit annulé: \\\`$COMMIT_SHA\\\`\\n↩️  Restauré vers: \\\`$ROLLBACK_SHA\\\`\\n🌐 https://mangetamain.lafrance.io/\"}" \
                "$DISCORD_WEBHOOK"

              exit 1
            fi

            sleep 10
          done

          echo "[$(date)] ⏱️ Timeout CI (5min)"
          echo "[$(date)] TIMEOUT: $COMMIT_SHA" >> /var/log/preprod-deployments.log
          exit 1
          SCRIPT_EOF

          chmod +x /tmp/watch-ci-${{ github.sha }}.sh

          # Lancer en background avec stdbuf pour forcer line buffering
          nohup stdbuf -oL -eL /tmp/watch-ci-${{ github.sha }}.sh \
            > /tmp/ci-watcher-${{ github.sha }}.log 2>&1 &

          WATCHER_PID=$!
          echo "✅ CI watcher launched in background (PID: $WATCHER_PID)"
          echo "📝 Logs: /tmp/ci-watcher-${{ github.sha }}.log"
          echo "$WATCHER_PID" > /tmp/watcher-pid-${{ github.sha }}

      - name: ✅ Notify deployment complete
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -d "{\"content\":\"✅ **Déploiement Preprod terminé!**\\n🌐 URL: https://mangetamain.lafrance.io/\\n📦 Commit: \\\`${{ github.sha }}\\\`\\n⏳ CI en cours, rollback auto si échec\\n🕐 $(date +'%Y-%m-%d %H:%M:%S')\"}" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"

      - name: ❌ Notify deployment failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -d "{\"content\":\"❌ **ÉCHEC Déploiement Preprod**\\n📦 Commit: \\\`${{ github.sha }}\\\`\\n⚠️  **Deploy échoué - intervention requise**\\n👤 Commit par: ${{ github.actor }}\"}" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}"

# ═══════════════════════════════════════════════════════
# Comment ça marche :
# ═══════════════════════════════════════════════════════
#
# 1. Job démarre sur self-hosted runner
# 2. Deploy IMMÉDIAT (30-40 secondes)
# 3. Lance script de surveillance en background
# 4. Job se TERMINE → runner LIBÉRÉ immédiatement
# 5. Script background continue de tourner sur le serveur
# 6. Si CI échoue → script fait le rollback automatique
# 7. Script se termine et nettoie
#
# Avantages :
# ✅ Runner libéré immédiatement après deploy
# ✅ Pas de blocage pour les prochains workflows
# ✅ Le watch tourne en arrière-plan sur le serveur
# ✅ Un seul job = pas de problème d'ordre d'exécution
# ✅ STATE_FILE persiste entre les workflows
